service.name = span-normalizer
service.admin.port = 8099

main.class = org.hypertrace.core.spannormalizer.SpanNormalizer

span.type = jaeger
input.topic = "jaeger-spans"
output.topic = "raw-spans-from-jaeger-spans"
raw.logs.output.topic = "raw-logs"
precreate.topics = false
precreate.topics = ${?PRE_CREATE_TOPICS}

kafka.streams.config = {
  application.id = jaeger-spans-to-raw-spans-job
  num.stream.threads = 2
  num.stream.threads = ${?NUM_STREAM_THREADS}

  bootstrap.servers = "localhost:9092"
  bootstrap.servers = ${?KAFKA_BOOTSTRAP_SERVERS}

  schema.registry.url = "http://localhost:8081"
  schema.registry.url = ${?SCHEMA_REGISTRY_URL}
  value.subject.name.strategy = "io.confluent.kafka.serializers.subject.TopicRecordNameStrategy"
}

processor {
  defaultTenantId = ${?DEFAULT_TENANT_ID}
}

logger.names = ["file"]
logger.file.dir = "/var/logs/span-normalizer"

metrics.reporter.prefix = org.hypertrace.core.spannormalizer.jobSpanNormalizer
metrics.reporter.names = ["prometheus"]
metrics.reportInterval = 60

spanRedaction {
  piiPciFields = [
    {
      name = "accountnum",
      regexString = "[0-9]{9,18}",
      keys = ["PayeeAccountNo", "PayerAccountNo", "payee_account", "PayeeAccountNo", "accountNumber", "payer_ac_no", "payee_ac_no", "bank_account_number", "payer_account_number", "account_number", "razorpayx_account_number", "bank_acc_no", "PayerAccountNo"],
      type = "PII"
    },
    {
      name = "cardnum",
      regexString = "[0-9]{9,18}",
      keys = ["merchant_auto_debit_account_number", "cardnum", "masked_card_number", "card_number", "maskedAccountNumber", "number"],
      type = "PCI"
    },
    {
      name = "pan",
      regexString = "[A-Z a-z]{3}[ABCGHLJPTF abcghljptf]{1}[A-Z a-z]{1}[0-9]{4}[A-Z a-z]{1}",
      keys = [],
      type = "PII"
    },
    {
      name = "aadhar",
      regexString = "([2-9][0-9]{3}[0-9]{4}[0-9]{4})",
      keys = ["adhar_card_number", "aadhar_card_number", "aadhar_no", "aadhar_number", "pan_or_aadhar_no", "adhar_card_no", "aadhar_card_no", "adhar_number"],
      type = "PCI"
    },
    {
      name = "cvv",
      regexString = "([0-9]{3})",
      keys = ["cvv", "cavv"],
      type = "PCI"
    },
    {
      name = "vpa",
      regexString = "([0-9]{9,18}@[a-zA-Z]{3,})",
      keys = [],
      type = "PII"
    }
  ]
}